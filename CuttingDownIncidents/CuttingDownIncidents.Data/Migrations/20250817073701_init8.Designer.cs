// <auto-generated />
using System;
using CuttingDownIncidents.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CuttingDownIncidents.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250817073701_init8")]
    partial class init8
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Channel", b =>
                {
                    b.Property<int>("Channel_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Channel_Key"));

                    b.Property<string>("Channel_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Channel_Key");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Cutting_Down_Fact.CuttingDownDetail", b =>
                {
                    b.Property<int>("Cutting_Down_Detail_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_Detail_Key"));

                    b.Property<DateTime>("ActualCreatetDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Cutting_Down_HeaderCutting_Down_Key")
                        .HasColumnType("int");

                    b.Property<int>("Cutting_Down_Key")
                        .HasColumnType("int");

                    b.Property<int>("ImpactedCustomers")
                        .HasColumnType("int");

                    b.Property<int>("Network_Element_Key")
                        .HasColumnType("int");

                    b.Property<int?>("networkElementNetwork_Element_Key")
                        .HasColumnType("int");

                    b.HasKey("Cutting_Down_Detail_Key");

                    b.HasIndex("Cutting_Down_HeaderCutting_Down_Key");

                    b.HasIndex("networkElementNetwork_Element_Key");

                    b.ToTable("Cutting_Down_Detail");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Cutting_Down_Fact.CuttingDownHeader", b =>
                {
                    b.Property<int>("Cutting_Down_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_Key"));

                    b.Property<DateTime>("ActualCreatetDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Channel_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Channel_Key1")
                        .HasColumnType("int");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CuttingDownIgnoredCutting_Down_Incident_ID")
                        .HasColumnType("int");

                    b.Property<int>("Cutting_Down_Incident_ID")
                        .HasColumnType("int");

                    b.Property<int>("Cutting_Down_Problem_Type_Key")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProblemTypeProblem_Type_Key")
                        .HasColumnType("int");

                    b.Property<DateTime>("SynchCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SynchUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cutting_Down_Key");

                    b.HasIndex("Channel_Key1");

                    b.HasIndex("CuttingDownIgnoredCutting_Down_Incident_ID");

                    b.HasIndex("ProblemTypeProblem_Type_Key");

                    b.ToTable("Cutting_Down_Header");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Cutting_Down_Fact.CuttingDownIgnored", b =>
                {
                    b.Property<int>("Cutting_Down_Incident_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_Incident_ID"));

                    b.Property<DateTime>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cabin_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cable_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("SynchCreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Cutting_Down_Incident_ID");

                    b.ToTable("Cutting_Down_Ignored");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Network.NetworkElement", b =>
                {
                    b.Property<int>("Network_Element_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Network_Element_Key"));

                    b.Property<int?>("NetworkElementTypeNetwork_Element_Type_Key")
                        .HasColumnType("int");

                    b.Property<string>("Network_Element_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Network_Element_Type_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Parent_Network_Element_Key")
                        .HasColumnType("int");

                    b.HasKey("Network_Element_Key");

                    b.HasIndex("NetworkElementTypeNetwork_Element_Type_Key");

                    b.ToTable("Network_Element");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Network.NetworkElementHierarchyPath", b =>
                {
                    b.Property<int>("Network_Element_Hierarchy_Path_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Network_Element_Hierarchy_Path_Key"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network_Element_Hierarchy_Path_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Network_Element_Hierarchy_Path_Key");

                    b.ToTable("Network_Element_Hierarchy_Path");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Network.NetworkElementType", b =>
                {
                    b.Property<int>("Network_Element_Type_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Network_Element_Type_Key"));

                    b.Property<int?>("NetworkElementHierarchyPathNetwork_Element_Hierarchy_Path_Key")
                        .HasColumnType("int");

                    b.Property<int>("Network_Element_Hierarchy_Path_Key")
                        .HasColumnType("int");

                    b.Property<string>("Network_Element_Type_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Parent_Network_Element_Type_Key")
                        .HasColumnType("int");

                    b.HasKey("Network_Element_Type_Key");

                    b.HasIndex("NetworkElementHierarchyPathNetwork_Element_Hierarchy_Path_Key");

                    b.ToTable("Network_Element_Type");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.ProblemType", b =>
                {
                    b.Property<int>("Problem_Type_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Problem_Type_Key"));

                    b.Property<string>("Problem_Type_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Problem_Type_Key");

                    b.ToTable("Problem_Type");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.CuttingDownA", b =>
                {
                    b.Property<int>("Cutting_Down_A_Incident_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_A_Incident_ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cutting_Down_Cabin_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProblemTypeProblem_Type_Key")
                        .HasColumnType("int");

                    b.Property<int>("Problem_Type_Key")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cutting_Down_A_Incident_ID");

                    b.HasIndex("ProblemTypeProblem_Type_Key");

                    b.ToTable("Cutting_Down_A");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.CuttingDownB", b =>
                {
                    b.Property<int>("Cutting_Down_B_Incident_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cutting_Down_B_Incident_ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cutting_Down_Cable_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PlannedEndDTS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDTS")
                        .HasColumnType("datetime2");

                    b.Property<int>("Problem_Type_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Problem_Type_Key1")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cutting_Down_B_Incident_ID");

                    b.HasIndex("Problem_Type_Key1");

                    b.ToTable("Cutting_Down_B");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Block", b =>
                {
                    b.Property<int>("Block_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Block_Key"));

                    b.Property<string>("Block_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cable_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Cable_Key1")
                        .HasColumnType("int");

                    b.HasKey("Block_Key");

                    b.HasIndex("Cable_Key1");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Building", b =>
                {
                    b.Property<int>("Building_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Building_Key"));

                    b.Property<int>("Block_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Block_Key1")
                        .HasColumnType("int");

                    b.Property<string>("Building_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Building_Key");

                    b.HasIndex("Block_Key1");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Cabin", b =>
                {
                    b.Property<int>("Cabin_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cabin_Key"));

                    b.Property<string>("Cabin_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tower_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Tower_Key1")
                        .HasColumnType("int");

                    b.HasKey("Cabin_Key");

                    b.HasIndex("Tower_Key1");

                    b.ToTable("Cabin");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Cable", b =>
                {
                    b.Property<int>("Cable_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cable_Key"));

                    b.Property<int>("Cabin_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Cabin_Key1")
                        .HasColumnType("int");

                    b.Property<string>("Cable_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cable_Key");

                    b.HasIndex("Cabin_Key1");

                    b.ToTable("Cable");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.City", b =>
                {
                    b.Property<int>("City_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_Key"));

                    b.Property<string>("City_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zone_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Zone_Key1")
                        .HasColumnType("int");

                    b.HasKey("City_Key");

                    b.HasIndex("Zone_Key1");

                    b.ToTable("City");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Flat", b =>
                {
                    b.Property<int>("Flat_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Flat_Key"));

                    b.Property<int>("Building_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Building_Key1")
                        .HasColumnType("int");

                    b.HasKey("Flat_Key");

                    b.HasIndex("Building_Key1");

                    b.ToTable("Flat");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Governrate", b =>
                {
                    b.Property<int>("Governrate_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Governrate_Key"));

                    b.Property<string>("Governrate_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Governrate_Key");

                    b.ToTable("Governrate");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Sector", b =>
                {
                    b.Property<int>("Sector_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sector_Key"));

                    b.Property<int>("Governrate_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Governrate_Key1")
                        .HasColumnType("int");

                    b.Property<string>("Sector_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sector_Key");

                    b.HasIndex("Governrate_Key1");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Station", b =>
                {
                    b.Property<int>("Station_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Station_Key"));

                    b.Property<int>("City_Key")
                        .HasColumnType("int");

                    b.Property<int?>("City_Key1")
                        .HasColumnType("int");

                    b.Property<string>("Station_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Station_Key");

                    b.HasIndex("City_Key1");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Subscription", b =>
                {
                    b.Property<int>("Subscription_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Subscription_Key"));

                    b.Property<int>("Building_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Flat_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Flat_Key1")
                        .HasColumnType("int");

                    b.Property<int?>("Meter_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Payer_Key")
                        .HasColumnType("int");

                    b.HasKey("Subscription_Key");

                    b.HasIndex("Flat_Key1");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Tower", b =>
                {
                    b.Property<int>("Tower_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tower_Key"));

                    b.Property<int>("Station_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Station_Key1")
                        .HasColumnType("int");

                    b.Property<string>("Tower_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tower_Key");

                    b.HasIndex("Station_Key1");

                    b.ToTable("Tower");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Zone", b =>
                {
                    b.Property<int>("Zone_Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Zone_Key"));

                    b.Property<int>("Sector_Key")
                        .HasColumnType("int");

                    b.Property<int?>("Sector_Key1")
                        .HasColumnType("int");

                    b.Property<string>("Zone_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Zone_Key");

                    b.HasIndex("Sector_Key1");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Cutting_Down_Fact.CuttingDownDetail", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.FactTables.Cutting_Down_Fact.CuttingDownHeader", "Cutting_Down_Header")
                        .WithMany()
                        .HasForeignKey("Cutting_Down_HeaderCutting_Down_Key");

                    b.HasOne("CuttingDownIncidents.Domain.Entities.FactTables.Network.NetworkElement", "networkElement")
                        .WithMany()
                        .HasForeignKey("networkElementNetwork_Element_Key");

                    b.Navigation("Cutting_Down_Header");

                    b.Navigation("networkElement");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Cutting_Down_Fact.CuttingDownHeader", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.FactTables.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("Channel_Key1");

                    b.HasOne("CuttingDownIncidents.Domain.Entities.FactTables.Cutting_Down_Fact.CuttingDownIgnored", "CuttingDownIgnored")
                        .WithMany()
                        .HasForeignKey("CuttingDownIgnoredCutting_Down_Incident_ID");

                    b.HasOne("CuttingDownIncidents.Domain.Entities.ProblemType", "ProblemType")
                        .WithMany()
                        .HasForeignKey("ProblemTypeProblem_Type_Key");

                    b.Navigation("Channel");

                    b.Navigation("CuttingDownIgnored");

                    b.Navigation("ProblemType");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Network.NetworkElement", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.FactTables.Network.NetworkElementType", "NetworkElementType")
                        .WithMany()
                        .HasForeignKey("NetworkElementTypeNetwork_Element_Type_Key");

                    b.Navigation("NetworkElementType");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.FactTables.Network.NetworkElementType", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.FactTables.Network.NetworkElementHierarchyPath", "NetworkElementHierarchyPath")
                        .WithMany()
                        .HasForeignKey("NetworkElementHierarchyPathNetwork_Element_Hierarchy_Path_Key");

                    b.Navigation("NetworkElementHierarchyPath");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.CuttingDownA", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.ProblemType", "ProblemType")
                        .WithMany()
                        .HasForeignKey("ProblemTypeProblem_Type_Key");

                    b.Navigation("ProblemType");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.CuttingDownB", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.ProblemType", "Problem_Type")
                        .WithMany()
                        .HasForeignKey("Problem_Type_Key1");

                    b.Navigation("Problem_Type");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Block", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Cable", "Cable")
                        .WithMany()
                        .HasForeignKey("Cable_Key1");

                    b.Navigation("Cable");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Building", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Block", "Block")
                        .WithMany()
                        .HasForeignKey("Block_Key1");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Cabin", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Tower", "Tower")
                        .WithMany()
                        .HasForeignKey("Tower_Key1");

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Cable", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Cabin", "Cabin")
                        .WithMany()
                        .HasForeignKey("Cabin_Key1");

                    b.Navigation("Cabin");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.City", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("Zone_Key1");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Flat", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Building", "Building")
                        .WithMany()
                        .HasForeignKey("Building_Key1");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Sector", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Governrate", "Governrate")
                        .WithMany()
                        .HasForeignKey("Governrate_Key1");

                    b.Navigation("Governrate");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Station", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.City", "City")
                        .WithMany()
                        .HasForeignKey("City_Key1");

                    b.Navigation("City");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Subscription", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Flat", "Flat")
                        .WithMany()
                        .HasForeignKey("Flat_Key1");

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Tower", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Station", "Station")
                        .WithMany()
                        .HasForeignKey("Station_Key1");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Zone", b =>
                {
                    b.HasOne("CuttingDownIncidents.Domain.Entities.Staging_Tables.hierarchy.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("Sector_Key1");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
